package puiiiokiq.anicat.backend.anime.Controllers;

import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import puiiiokiq.anicat.backend.admin.SiteLogService;
import puiiiokiq.anicat.backend.anime.AnimeInfoRequest;
import puiiiokiq.anicat.backend.anime.Repository.AnimeRepository;
import puiiiokiq.anicat.backend.anime.Service.AnimeService;
import puiiiokiq.anicat.backend.anime.UploadRequest;
import puiiiokiq.anicat.backend.anime.models.Anime;
import puiiiokiq.anicat.backend.anime.models.Banner;
import puiiiokiq.anicat.backend.anime.models.Cover;
import puiiiokiq.anicat.backend.anime.models.Screenshots;
import puiiiokiq.anicat.backend.category.AnimeCategory;
import puiiiokiq.anicat.backend.utils.service.S3Service;
import puiiiokiq.anicat.backend.episodes.models.Episode;
import puiiiokiq.anicat.backend.episodes.models.Audio;


import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import puiiiokiq.anicat.backend.episodes.Repository.EpisodeRepository;
import puiiiokiq.anicat.backend.episodes.Repository.AudioRepository;
import puiiiokiq.anicat.backend.anime.Repository.BannerRepository;
import puiiiokiq.anicat.backend.anime.Repository.CoverRepository;
import puiiiokiq.anicat.backend.anime.Repository.ScreenshotsRepository;
import puiiiokiq.anicat.backend.category.AnimeCategoryRepository;
import puiiiokiq.anicat.backend.category.AnimeCategory;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AnimeAdminController {

    private final AnimeService animeService;
    private final S3Service s3Service;
    private final AnimeRepository animeRepository;
    private final EpisodeRepository episodeRepository;
    private final AudioRepository audioRepository;
    private final BannerRepository bannerRepository;
    private final CoverRepository coverRepository;
    private final SiteLogService logService;
    private final ScreenshotsRepository screenshotsRepository;
    private final AnimeCategoryRepository animeCategoryRepository;


    @PostMapping("/create-anime")
    public ResponseEntity<Long> createAnimeStructure(Authentication authentication) {
        Long animeId = animeService.createAnimeAndReturnId();
        s3Service.createAnimeDirectories(animeId);

        // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–µ",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") —Å–æ–∑–¥–∞–ª –∞–Ω–∏–º–µ (ID: " + animeId + ")",
                username
        );

        return ResponseEntity.ok(animeId);
    }


    @DeleteMapping("/delete-anime/{animeId}")
    public ResponseEntity<String> deleteAnime(
            @PathVariable Long animeId,
            Authentication authentication
    ) {
        animeService.deleteAnimeWithRelations(animeId);
        s3Service.deleteAnimeDirectory(animeId);

        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–µ",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") —É–¥–∞–ª–∏–ª –∞–Ω–∏–º–µ (ID: " + animeId + ")",
                username
        );

        return ResponseEntity.ok("–ê–Ω–∏–º–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
    }


    // 3. –ó–ê–ì–†–£–ó–ö–ê –û–ë–õ–û–ñ–ö–ò
    @PostMapping("/upload-cover/{animeId}")
    public ResponseEntity<String> uploadCover(
            @PathVariable Long animeId,
            @RequestParam("file") MultipartFile file,
            Authentication authentication
    ) {
        Long coverId = animeService.createCoverRecord(animeId);
        String newFilename = coverId + ".webp";
        s3Service.uploadFile("animes/" + animeId + "/cover/" + newFilename, file);

        return ResponseEntity.ok("–û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    }

    // 4. –ó–ê–ì–†–£–ó–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ê–ù–ò–ú–ï
    @PostMapping("/upload-info/{animeId}")
    public ResponseEntity<String> uploadAnimeInfo(
            @PathVariable Long animeId,
            @RequestBody AnimeInfoRequest request,
            Authentication authentication
    ) {
        animeService.saveAnimeInfo(animeId, request);

        // –ª–æ–≥
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–ó–∞–≥—Ä—É–∑–∫–∞/–°–æ—Ö—Ä–∞–Ω–∏–µ –∞–Ω–∏–º–µ",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + request.getTitle() + ")",
                username
        );

        return ResponseEntity.ok("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    }

    // 5. –ó–ê–ì–†–£–ó–ö–ê –°–ö–†–ò–ù–®–û–¢–û–í
    @PostMapping("/upload-screenshots/{animeId}")
    public ResponseEntity<String> uploadScreenshots(
            @PathVariable Long animeId,
            @RequestParam("files") List<MultipartFile> files,
            Authentication authentication
    ) {
        if (files.size() > 8) {
            return ResponseEntity.badRequest().body("–ú–∞–∫—Å–∏–º—É–º 7 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤");
        }

        String username = authentication != null ? authentication.getName() : "anonymous";

        for (MultipartFile file : files) {
            Long screenshotId = animeService.createScreenshotRecord(animeId);
            String filename = screenshotId + ".webp";
            s3Service.uploadFile("animes/" + animeId + "/screenshots/" + filename, file);

        }

        return ResponseEntity.ok("–°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    }

    // 6. –ó–ê–ì–†–£–ó–ö–ê –≠–ü–ò–ó–û–î–û–í –° –û–ó–í–£–ß–ö–û–ô
    @PostMapping("/upload-episode/{animeId}/{audioName}/1080/{episodeId}")
    public ResponseEntity<String> uploadEpisodeToSpecific(
            @PathVariable Long animeId,
            @PathVariable String audioName,
            @PathVariable Long episodeId,
            @RequestParam("file") MultipartFile file
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        Episode episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–∑–≤—É—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        Optional<Audio> existingAudio = audioRepository.findByEpisodeIdAndName(episodeId, audioName);

        if (existingAudio.isEmpty()) {
            Audio audio = new Audio();
            audio.setName(audioName);
            audio.setAnime(anime);
            audio.setEpisode(episode);
            audioRepository.save(audio);
        }

        // üìÅ –ó–∞–¥–∞—ë–º –ø—É—Ç—å —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4
        String path = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);

        // üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ .mp4
        s3Service.uploadFile(path, file);

        return ResponseEntity.ok("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ .mp4 –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ " + episodeId);
    }
    @PostMapping("/get-upload-url")
    public ResponseEntity<String> getUploadUrl(
            @RequestBody UploadRequest request
    ) {
        String key = String.format("animes/%d/episodes/%s/1080/%d.mp4",
                request.getAnimeId(), request.getAudioName(), request.getEpisodeId());

        URL url = s3Service.generatePresignedUploadUrl(key);
        return ResponseEntity.ok(url.toString());
    }



    // 7. –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –ó–ê–ì–†–£–ó–ö–ò
    @GetMapping("/check-upload/{animeId}")
    public ResponseEntity<String> checkUpload(@PathVariable Long animeId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–ª–æ–∂–∫–∏ (–±–µ–∑ —ç–ø–∏–∑–æ–¥–æ–≤, –∞—É–¥–∏–æ –∏ alias)
        boolean result = animeService.checkAnimeUpload(animeId);

        if (result) {
            return ResponseEntity.ok("‚úÖ –ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...");
        } else {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±–ª–æ–∂–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è).");
        }
    }

    // 8. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–ï –î–õ–Ø –≠–ü–ò–ó–û–î–ê

    @PostMapping("/upload-episode/create-episode/{animeId}")
    public ResponseEntity<Map<String, Object>> createEpisode(
            @PathVariable Long animeId,
            @RequestBody Map<String, Object> payload
    ) {
        String title = Optional.ofNullable(payload.get("title"))
                .map(Object::toString)
                .map(String::trim)
                .filter(t -> !t.isEmpty())
                .orElse("–ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥");

        Long episodeId = animeService.createEpisodeRecord(animeId, title);

        return ResponseEntity.ok(Map.of(
                "id", episodeId,
                "title", title
        ));
    }
    @PostMapping("/upload-episode/create-audio/{animeId}/{episodeId}")
    public ResponseEntity<Map<String, Object>> createAudio(
            @PathVariable Long animeId,
            @PathVariable Long episodeId,
            @RequestBody Map<String, Object> payload
    ) {
        String name = Optional.ofNullable(payload.get("name"))
                .map(Object::toString)
                .map(String::trim)
                .filter(n -> !n.isEmpty())
                .orElse("–ù–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞");

        Anime anime = animeRepository.findById(animeId).orElseThrow();
        Episode episode = episodeRepository.findById(episodeId).orElseThrow();

        Audio audio = new Audio();
        audio.setAnime(anime);
        audio.setEpisode(episode);
        audio.setName(name);

        audioRepository.save(audio);

        return ResponseEntity.ok(Map.of("id", audio.getId(), "name", audio.getName()));
    }

    @PutMapping("/upload-episode/update-episode/{episodeId}")
    public ResponseEntity<String> updateEpisodeTitle(
            @PathVariable Long episodeId,
            @RequestBody Map<String, String> request
    ) {
        String newTitle = request.getOrDefault("title", "").trim();
        if (newTitle.isEmpty()) {
            return ResponseEntity.badRequest().body("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        Episode episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("‚ùå –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        episode.setTitle(newTitle);
        episodeRepository.save(episode);

        return ResponseEntity.ok("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
    }

    @PutMapping("/upload-episode/update-audio/{audioId}")
    public ResponseEntity<String> updateAudioName(
            @PathVariable Long audioId,
            @RequestBody Map<String, String> request
    ) {
        String newName = request.getOrDefault("name", "").trim();
        if (newName.isEmpty()) {
            return ResponseEntity.badRequest().body("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        Audio audio = audioRepository.findById(audioId)
                .orElseThrow(() -> new RuntimeException("‚ùå –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        audio.setName(newName);
        audioRepository.save(audio);

        return ResponseEntity.ok("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
    }

    @DeleteMapping("/delete-episode/{episodeId}")
    public ResponseEntity<String> deleteEpisode(@PathVariable Long episodeId) {
        var episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        episode.getAudios().forEach(audio -> {
            Long animeId = episode.getAnime().getId();
            String audioName = audio.getName();

            String fileKey = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);
            s3Service.deleteFile(fileKey);

            String folderKey = String.format("animes/%d/episodes/%s/", animeId, audioName);
            s3Service.deleteFolderRecursive(folderKey);

            audioRepository.delete(audio);
        });

        episodeRepository.delete(episode);
        return ResponseEntity.ok("–≠–ø–∏–∑–æ–¥ –∏ –≤—Å–µ –æ–∑–≤—É—á–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
    }


    @DeleteMapping("/delete-audio/{audioId}")
    public ResponseEntity<String> deleteAudio(@PathVariable Long audioId) {
        var audio = audioRepository.findById(audioId)
                .orElseThrow(() -> new RuntimeException("–û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        Long animeId = audio.getAnime().getId();
        Long episodeId = audio.getEpisode().getId();
        String audioName = audio.getName();

        String fileKey = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);
        s3Service.deleteFile(fileKey);

        String folderKey = String.format("animes/%d/episodes/%s/", animeId, audioName);
        s3Service.deleteFolderRecursive(folderKey);

        audioRepository.delete(audio);

        return ResponseEntity.ok("–û–∑–≤—É—á–∫–∞ –∏ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω—ã");
    }

    @PostMapping("/upload-banner/{animeId}")
    public ResponseEntity<String> uploadBanner(
            @PathVariable Long animeId,
            @RequestParam("file") MultipartFile file,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        String originalName = file.getOriginalFilename(); // –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø—Ä–æ–±–µ–ª—ã, –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã

        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        Long bannerId = animeService.createBannerRecord(animeId, originalName);

        // 2. –ü—É—Ç—å –≤ S3 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¢–û–õ–¨–ö–û –ø–æ–¥ ID.webp
        String filename = bannerId + ".webp";
        String path = "animes/" + animeId + "/banner/" + filename;

        try {
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ‚Äî –∫–∞–∫ .webp)
            s3Service.uploadFile(path, file);

            return ResponseEntity.ok("‚úÖ –ë–∞–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ " + filename);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞: " + e.getMessage());
        }
    }


    @PutMapping("/edit-info/{animeId}")
    public ResponseEntity<String> editAnimeInfo(
            @PathVariable Long animeId,
            @RequestBody AnimeInfoRequest request,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        anime.setTitle(request.getTitle());
        anime.setAlttitle(request.getAlttitle());
        anime.setDescription(request.getDescription());
        anime.setGenres(request.getGenres());
        anime.setStatus(request.getStatus());
        anime.setType(request.getType());
        anime.setEpisodeAll(request.getEpisode_all());
        anime.setCurrentEpisode(request.getCurrent_episode());
        anime.setRating(request.getRating());
        anime.setYear(request.getYear());
        anime.setSeason(request.getSeason());
        anime.setMouthSeason(request.getMouth_season());
        anime.setStudio(request.getStudio());
        anime.setRealesedFor(request.getRealesed_for());
        anime.setAlias(request.getAlias());
        anime.setKodik(request.getKodik());

        animeRepository.save(anime);

        // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                username
        );

        return ResponseEntity.ok("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }


    @PutMapping("/edit-cover/{animeId}")
    public ResponseEntity<String> editCover(
            @PathVariable Long animeId,
            @RequestParam("file") MultipartFile file,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId).orElseThrow();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É–∂–µ –æ–±–ª–æ–∂–∫–∞, —É–¥–∞–ª—è–µ–º –µ—ë
        if (anime.getCover() != null) {
            Long oldId = anime.getCover().getId();

            // –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å —Å cover
            anime.setCover(null);
            animeRepository.save(anime);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –æ–±–ª–æ–∂–∫—É –∏–∑ S3
            String oldKey = "animes/" + animeId + "/cover/" + oldId + ".webp";
            s3Service.deleteFile(oldKey);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å cover –∏–∑ –±–∞–∑—ã
            coverRepository.deleteById(oldId);
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É —Å –Ω–æ–≤—ã–º ID
        Cover cover = new Cover();
        cover.setAnime(anime);
        coverRepository.save(cover);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3 —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
        String newKey = "animes/" + animeId + "/cover/" + cover.getId() + ".webp";
        s3Service.uploadFile(newKey, file);

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É –∫ –∞–Ω–∏–º–µ
        anime.setCover(cover);
        animeRepository.save(anime);

        // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –æ–±–Ω–æ–≤–∏–ª –æ–±–ª–æ–∂–∫—É (ID: " + cover.getId() + ") –¥–ª—è –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                username
        );

        return ResponseEntity.ok("‚úÖ –û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
    }





    @PutMapping("/edit-banner/{animeId}")
    public ResponseEntity<String> editBanner(
            @PathVariable Long animeId,
            @RequestParam("file") MultipartFile file,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId).orElseThrow();

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (anime.getBanner() != null) {
            Long oldId = anime.getBanner().getId();

            // 1. –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–≤—è–∑—å
            anime.setBanner(null);
            animeRepository.save(anime);

            // 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
            String oldKey = "animes/" + animeId + "/banner/" + oldId + ".webp";
            s3Service.deleteFile(oldKey);

            // 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã
            bannerRepository.deleteById(oldId);
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        List<Banner> existingBanners = bannerRepository.findByAnimeId(animeId);
        for (Banner existingBanner : existingBanners) {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –±–∞–Ω–Ω–µ—Ä–æ–≤ –¥–ª—è —Ç–æ–≥–æ –∂–µ –∞–Ω–∏–º–µ
            if (!existingBanner.getId().equals(anime.getBanner() != null ? anime.getBanner().getId() : null)) {
                bannerRepository.deleteById(existingBanner.getId());
                // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ S3 –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞
                String duplicateKey = "animes/" + animeId + "/banner/" + existingBanner.getId() + ".webp";
                s3Service.deleteFile(duplicateKey);
            }
        }

        // 4. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
        Banner banner = new Banner();
        banner.setAnime(anime);
        bannerRepository.save(banner);

        // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
        String key = "animes/" + animeId + "/banner/" + banner.getId() + ".webp";
        s3Service.uploadFile(key, file);

        // 6. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –∫ –∞–Ω–∏–º–µ
        anime.setBanner(banner);
        animeRepository.save(anime);

        // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –æ–±–Ω–æ–≤–∏–ª –±–∞–Ω–Ω–µ—Ä (ID: " + banner.getId() + ") –¥–ª—è –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                username
        );

        return ResponseEntity.ok("‚úÖ –ë–∞–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω");
    }




    @PutMapping("/edit-screenshots/{animeId}")
    public ResponseEntity<String> editScreenshots(
            @PathVariable Long animeId,
            @RequestParam("files") List<MultipartFile> newFiles,
            @RequestParam("keepIds") List<Long> keepIds,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId).orElseThrow();

        // –ù–∞–π–¥—ë–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        List<Screenshots> existingShots = screenshotsRepository.findByAnimeId(animeId);

        // –í—ã—á–∏—Å–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        List<Screenshots> toRemove = existingShots.stream()
                .filter(s -> !keepIds.contains(s.getId()))
                .toList();

        for (Screenshots shot : toRemove) {
            String key = "animes/" + animeId + "/screenshots/" + shot.getId() + ".webp";
            s3Service.deleteFile(key);
        }
        screenshotsRepository.deleteAll(toRemove);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
        List<Long> newIds = new java.util.ArrayList<>();
        for (MultipartFile file : newFiles) {
            Screenshots shot = new Screenshots();
            shot.setAnime(anime);
            screenshotsRepository.save(shot);

            newIds.add(shot.getId());

            String key = "animes/" + animeId + "/screenshots/" + shot.getId() + ".webp";
            s3Service.uploadFile(key, file);
        }

        // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –æ–±–Ω–æ–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (ID'—ã –Ω–æ–≤—ã—Ö: " + newIds + ") –¥–ª—è –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                username
        );

        return ResponseEntity.ok("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    }



    @DeleteMapping("/delete-cover/{animeId}")
    public ResponseEntity<String> deleteCover(
            @PathVariable Long animeId,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        if (anime.getCover() != null) {
            Long coverId = anime.getCover().getId();

            // 1. –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å
            anime.setCover(null);
            animeRepository.save(anime);

            // 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
            String key = "animes/" + animeId + "/cover/" + coverId + ".webp";
            s3Service.deleteFile(key);

            // 3. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            coverRepository.deleteById(coverId);

            // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            String username = authentication != null ? authentication.getName() : "anonymous";
            logService.log(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") —É–¥–∞–ª–∏–ª –æ–±–ª–æ–∂–∫—É (ID: " + coverId + ") –¥–ª—è –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                    username
            );
        }

        return ResponseEntity.ok("‚úÖ –û–±–ª–æ–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∞");
    }


    @DeleteMapping("/delete-banner/{animeId}")
    public ResponseEntity<String> deleteBanner(
            @PathVariable Long animeId,
            Authentication authentication
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        if (anime.getBanner() != null) {
            Long bannerId = anime.getBanner().getId();

            // 1. –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å
            anime.setBanner(null);
            animeRepository.save(anime);

            // 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
            String key = "animes/" + animeId + "/banner/" + bannerId + ".webp";
            s3Service.deleteFile(key);

            // 3. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            bannerRepository.deleteById(bannerId);

            // üî∑ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            String username = authentication != null ? authentication.getName() : "anonymous";
            logService.log(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") —É–¥–∞–ª–∏–ª –±–∞–Ω–Ω–µ—Ä (ID: " + bannerId + ") –¥–ª—è –∞–Ω–∏–º–µ (ID: " + animeId + ", –ù–∞–∑–≤–∞–Ω–∏–µ: " + anime.getTitle() + ")",
                    username
            );
        }

        return ResponseEntity.ok("‚úÖ –ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª—ë–Ω");
    }

    @PostMapping("/add-to-all-category/{animeId}")
    public ResponseEntity<String> addToAllAnimeCategory(@PathVariable Long animeId, Authentication authentication) {
        String categoryId = "2";
        AnimeCategory category = animeCategoryRepository.findById(categoryId)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ç–µ–≥–æ—Ä–∏—è '–≤—Å–µ –∞–Ω–∏–º–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        List<String> animeIdStrings = category.getAnimeIds();
        if (!animeIdStrings.contains(animeId.toString())) {
            animeIdStrings.add(animeId.toString());
            category.setAnimeIds(animeIdStrings);
            animeCategoryRepository.save(category);
        }

        // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        String username = authentication != null ? authentication.getName() : "anonymous";
        logService.log(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (" + username + ") –¥–æ–±–∞–≤–∏–ª –∞–Ω–∏–º–µ (ID: " + animeId + ") –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–≤—Å–µ –∞–Ω–∏–º–µ'",
                username
        );

        return ResponseEntity.ok("‚úÖ –ê–Ω–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–≤—Å–µ –∞–Ω–∏–º–µ'");
    }


}
