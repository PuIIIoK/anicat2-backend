package puiiiokiq.anicat.backend.anime;

import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import puiiiokiq.anicat.backend.utils.service.S3Service;
import puiiiokiq.anicat.backend.episodes.Episode;
import puiiiokiq.anicat.backend.episodes.Audio;


import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import puiiiokiq.anicat.backend.anime.AnimeRepository;
import puiiiokiq.anicat.backend.episodes.EpisodeRepository;
import puiiiokiq.anicat.backend.episodes.AudioRepository;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AnimeAdminController {

    private final AnimeService animeService;
    private final S3Service s3Service;
    private final AnimeRepository animeRepository;
    private final EpisodeRepository episodeRepository;
    private final AudioRepository audioRepository;


    // 1. –°–û–ó–î–ê–ù–ò–ï –ü–£–°–¢–û–ô –ó–ê–ü–ò–°–ò –ò –ü–ê–ü–û–ö
    @PostMapping("/create-anime")
    public ResponseEntity<Long> createAnimeStructure() {
        Long animeId = animeService.createAnimeAndReturnId();
        s3Service.createAnimeDirectories(animeId);
        return ResponseEntity.ok(animeId);
    }

    // 2. –£–î–ê–õ–ï–ù–ò–ï –ê–ù–ò–ú–ï –ò –í–°–ï–• –°–í–Ø–ó–ê–ù–ù–´–• –î–ê–ù–ù–´–•
    @DeleteMapping("/delete-anime/{animeId}")
    public ResponseEntity<String> deleteAnime(@PathVariable Long animeId) {
        animeService.deleteAnimeWithRelations(animeId);
        s3Service.deleteAnimeDirectory(animeId);
        return ResponseEntity.ok("–ê–Ω–∏–º–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
    }

    // 3. –ó–ê–ì–†–£–ó–ö–ê –û–ë–õ–û–ñ–ö–ò
    @PostMapping("/upload-cover/{animeId}")
    public ResponseEntity<String> uploadCover(
            @PathVariable Long animeId,
            @RequestParam("file") MultipartFile file
    ) {
        Long coverId = animeService.createCoverRecord(animeId);
        String newFilename = coverId + ".webp";
        s3Service.uploadFile("animes/" + animeId + "/cover/" + newFilename, file);
        return ResponseEntity.ok("–û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    }

    // 4. –ó–ê–ì–†–£–ó–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ê–ù–ò–ú–ï
    @PostMapping("/upload-info/{animeId}")
    public ResponseEntity<String> uploadAnimeInfo(
            @PathVariable Long animeId,
            @RequestBody AnimeInfoRequest request
    ) {
        animeService.saveAnimeInfo(animeId, request);
        return ResponseEntity.ok("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–Ω–∏–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    }

    // 5. –ó–ê–ì–†–£–ó–ö–ê –°–ö–†–ò–ù–®–û–¢–û–í
    @PostMapping("/upload-screenshots/{animeId}")
    public ResponseEntity<String> uploadScreenshots(
            @PathVariable Long animeId,
            @RequestParam("files") List<MultipartFile> files
    ) {
        if (files.size() > 6) {
            return ResponseEntity.badRequest().body("–ú–∞–∫—Å–∏–º—É–º 6 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤");
        }

        for (MultipartFile file : files) {
            Long screenshotId = animeService.createScreenshotRecord(animeId);
            String filename = screenshotId + ".webp";
            s3Service.uploadFile("animes/" + animeId + "/screenshots/" + filename, file);
        }
        return ResponseEntity.ok("–°–∫—Ä–∏–Ω—à–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    }

    // 6. –ó–ê–ì–†–£–ó–ö–ê –≠–ü–ò–ó–û–î–û–í –° –û–ó–í–£–ß–ö–û–ô
    @PostMapping("/upload-episode/{animeId}/{audioName}/1080/{episodeId}")
    public ResponseEntity<String> uploadEpisodeToSpecific(
            @PathVariable Long animeId,
            @PathVariable String audioName,
            @PathVariable Long episodeId,
            @RequestParam("file") MultipartFile file
    ) {
        Anime anime = animeRepository.findById(animeId)
                .orElseThrow(() -> new RuntimeException("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        Episode episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–∑–≤—É—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è —ç—Ç–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        Optional<Audio> existingAudio = audioRepository.findByEpisodeIdAndName(episodeId, audioName);

        if (existingAudio.isEmpty()) {
            Audio audio = new Audio();
            audio.setName(audioName);
            audio.setAnime(anime);
            audio.setEpisode(episode);
            audioRepository.save(audio);
        }

        // üìÅ –ó–∞–¥–∞—ë–º –ø—É—Ç—å —Å –Ω—É–∂–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4
        String path = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);

        // üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ .mp4
        s3Service.uploadFile(path, file);

        return ResponseEntity.ok("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ .mp4 –¥–ª—è —ç–ø–∏–∑–æ–¥–∞ " + episodeId);
    }
    @PostMapping("/get-upload-url")
    public ResponseEntity<String> getUploadUrl(
            @RequestBody UploadRequest request
    ) {
        String key = String.format("animes/%d/episodes/%s/1080/%d.mp4",
                request.getAnimeId(), request.getAudioName(), request.getEpisodeId());

        URL url = s3Service.generatePresignedUploadUrl(key);
        return ResponseEntity.ok(url.toString());
    }



    // 7. –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–°–¢–ò –ó–ê–ì–†–£–ó–ö–ò
    @GetMapping("/check-upload/{animeId}")
    public ResponseEntity<String> checkUpload(@PathVariable Long animeId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–ª–æ–∂–∫–∏ (–±–µ–∑ —ç–ø–∏–∑–æ–¥–æ–≤, –∞—É–¥–∏–æ –∏ alias)
        boolean result = animeService.checkAnimeUpload(animeId);

        if (result) {
            return ResponseEntity.ok("‚úÖ –ê–Ω–∏–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...");
        } else {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±–ª–æ–∂–∫–∞ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è).");
        }
    }

    // 8. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–ï –î–õ–Ø –≠–ü–ò–ó–û–î–ê

    @PostMapping("/upload-episode/create-episode/{animeId}")
    public ResponseEntity<Map<String, Object>> createEpisode(
            @PathVariable Long animeId,
            @RequestBody Map<String, Object> payload
    ) {
        String title = Optional.ofNullable(payload.get("title"))
                .map(Object::toString)
                .map(String::trim)
                .filter(t -> !t.isEmpty())
                .orElse("–ù–æ–≤—ã–π —ç–ø–∏–∑–æ–¥");

        Long episodeId = animeService.createEpisodeRecord(animeId, title);

        return ResponseEntity.ok(Map.of(
                "id", episodeId,
                "title", title
        ));
    }
    @PostMapping("/upload-episode/create-audio/{animeId}/{episodeId}")
    public ResponseEntity<Map<String, Object>> createAudio(
            @PathVariable Long animeId,
            @PathVariable Long episodeId,
            @RequestBody Map<String, Object> payload
    ) {
        String name = Optional.ofNullable(payload.get("name"))
                .map(Object::toString)
                .map(String::trim)
                .filter(n -> !n.isEmpty())
                .orElse("–ù–æ–≤–∞—è –æ–∑–≤—É—á–∫–∞");

        Anime anime = animeRepository.findById(animeId).orElseThrow();
        Episode episode = episodeRepository.findById(episodeId).orElseThrow();

        Audio audio = new Audio();
        audio.setAnime(anime);
        audio.setEpisode(episode);
        audio.setName(name);

        audioRepository.save(audio);

        return ResponseEntity.ok(Map.of("id", audio.getId(), "name", audio.getName()));
    }

    @PutMapping("/upload-episode/update-episode/{episodeId}")
    public ResponseEntity<String> updateEpisodeTitle(
            @PathVariable Long episodeId,
            @RequestBody Map<String, String> request
    ) {
        String newTitle = request.getOrDefault("title", "").trim();
        if (newTitle.isEmpty()) {
            return ResponseEntity.badRequest().body("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        Episode episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("‚ùå –≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        episode.setTitle(newTitle);
        episodeRepository.save(episode);

        return ResponseEntity.ok("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
    }

    @PutMapping("/upload-episode/update-audio/{audioId}")
    public ResponseEntity<String> updateAudioName(
            @PathVariable Long audioId,
            @RequestBody Map<String, String> request
    ) {
        String newName = request.getOrDefault("name", "").trim();
        if (newName.isEmpty()) {
            return ResponseEntity.badRequest().body("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        Audio audio = audioRepository.findById(audioId)
                .orElseThrow(() -> new RuntimeException("‚ùå –û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        audio.setName(newName);
        audioRepository.save(audio);

        return ResponseEntity.ok("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
    }

    @DeleteMapping("/delete-episode/{episodeId}")
    public ResponseEntity<String> deleteEpisode(@PathVariable Long episodeId) {
        var episode = episodeRepository.findById(episodeId)
                .orElseThrow(() -> new RuntimeException("–≠–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        episode.getAudios().forEach(audio -> {
            Long animeId = episode.getAnime().getId();
            String audioName = audio.getName();

            String fileKey = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);
            s3Service.deleteFile(fileKey);

            String folderKey = String.format("animes/%d/episodes/%s/", animeId, audioName);
            s3Service.deleteFolderRecursive(folderKey);

            audioRepository.delete(audio);
        });

        episodeRepository.delete(episode);
        return ResponseEntity.ok("–≠–ø–∏–∑–æ–¥ –∏ –≤—Å–µ –æ–∑–≤—É—á–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
    }


    @DeleteMapping("/delete-audio/{audioId}")
    public ResponseEntity<String> deleteAudio(@PathVariable Long audioId) {
        var audio = audioRepository.findById(audioId)
                .orElseThrow(() -> new RuntimeException("–û–∑–≤—É—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        Long animeId = audio.getAnime().getId();
        Long episodeId = audio.getEpisode().getId();
        String audioName = audio.getName();

        String fileKey = String.format("animes/%d/episodes/%s/1080/%d.mp4", animeId, audioName, episodeId);
        s3Service.deleteFile(fileKey);

        String folderKey = String.format("animes/%d/episodes/%s/", animeId, audioName);
        s3Service.deleteFolderRecursive(folderKey);

        audioRepository.delete(audio);

        return ResponseEntity.ok("–û–∑–≤—É—á–∫–∞ –∏ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω—ã");
    }


}
